#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#define N 10
#define M 20
#define VRAI 1
#define FAUX 0

struct Arete {
	char * nom;
	int debutant;
	int expert;
	int remontes;
};
typedef struct Arete ARETE; 

struct Station{			//station de ski
	ARETE A[M][M];
};
typedef struct Station STATION;

struct poids{			//station de ski
	char* nom;
	int p; //poids
	int visite;
};
typedef struct poids POIDS;
    

STATION init_stations(STATION S){
	int i,j;
	for(i=0;i<N;i++){
		for(j=0;j<N;j++){
			S.A[i][j].debutant = -1;
		}
	}
	S.A[0][1].debutant = 15;	S.A[0][1].nom = "la facile";
	S.A[1][0].debutant = 15;	S.A[1][0].nom = "la facile inverse";
	S.A[0][2].debutant = 10;	S.A[0][2].nom = "la 0-2";
	S.A[1][3].debutant = 15;	S.A[1][3].nom = "la 1-3";
	S.A[3][4].debutant = 5;		S.A[3][4].nom = "la 3-4";
	S.A[4][5].debutant = 30;	S.A[4][5].nom = "la 4-5";
	S.A[3][7].debutant = 50;	S.A[3][7].nom = "la 3-7";
	S.A[2][4].debutant = 20;	S.A[2][4].nom = "la 2-4";
	S.A[2][6].debutant = 45;	S.A[2][6].nom = "la 2-6";
	S.A[6][7].debutant = 26;	S.A[6][7].nom = "la 6-7";
	S.A[7][6].debutant = 26;	S.A[7][6].nom = "la 7-6";
	S.A[5][8].debutant = 19;	S.A[5][8].nom = "la 5-8";
	S.A[8][7].debutant = 8;		S.A[8][7].nom = "la 8-7";
	return S;
}
int plus_petit_dijkstra(POIDS T[],int x){ //retourne l'INDICE de la plus petite valeur d'un tableau, le x est le taille du tableau
	int i=0,j=1;

	while(j<=x){
		if(T[i].p >= 0 && T[i].visite == FAUX){ //il faut que les noeuds soit jamais visité  et que leurs poid soient different de -1( >0 )
			if(T[j].visite == FAUX && T[j].p > 0){
				if(T[i].p > T[j].p){
					i = j;
				}
			}j++;
		}else {i++; j++;}
	}
	return i;
}

void Dijkstra(char* depart,char* arrivee,int niveau){        
	STATION s = init_stations(s);
	int i,j;
	//int poids[N][3];              // la 2e colonne (poids[i][0]) doit contenir des chars pour plus de lisibilité
	POIDS p[N];
	int predec[N];
	int noeud,arri,dep; // sommet a traité a chaque iteration;

	for(i=0;i<N;i++){
		p[i].nom = "vide"; // a completer
		p[i].p = -1;   // aucun sommet n'a été visite
		p[i].visite = FAUX;    //  0 : sommet pas traité. 1 : sommet traité

		predec[i] = 0;     
	}
	
	  // p[i].nom = " "
	  
	for(i=0;i<N;i++){
		if(strcmp(depart,p[i].nom) == 0){
			p[i].p = 0;  
			noeud = i;
			dep = noeud;
		}
		if(strcmp(arrivee,p[i].nom) == 0){
			arri = i;  
		}
	}	
	
	while(arri != plus_petit_dijkstra(p,N)){
	
		noeud = plus_petit_dijkstra(p,N); 
		p[noeud].visite = VRAI;         //initialise le sommet comme visité
		
		i=0;
		do{
			if(niveau == 2){ //debutant
				if(s.A[noeud][i].debutant != -1){ //eske il a un fils
				
					if(p[i].visite == FAUX){ //eske le fils a été visité
						if(p[i].p == -1 || (p[noeud].p + s.A[noeud][i].debutant < p[i].p)){ //si le poids est pas traité (-1) ou le poids de depart + le poid de la liaison quil y a entre les 2 est inferieur au poids fils 
							p[i].p = p[noeud].p + s.A[noeud][i].debutant;
							predec[i] = noeud;
							
						}
					}
				}
			}
			else{ //expert
				if(s.A[noeud][i].expert != -1){ //eske il a un fils
				
					if(p[i].visite == FAUX){ //eske le fils a été visité
						if(p[i].p == -1 || (p[noeud].p + s.A[noeud][i].debutant < p[i].p)){ //si le poids est pas traité (-1) ou le poids de depart + le poid de la liaison quil y a entre les 2 est inferieur au poids fils 
							p[i].p = p[noeud].p + s.A[noeud][i].debutant;
							predec[i] = noeud;
							
						}
					}
				}
			}
			i++;
		}while(i<N);
		
	}printf("\n\t\t numero  poids  predec  vue");
		for(i=0;i<N;i++){
			printf("\n\t\t %d \t %d \t %d \t %d\n\n",i,p[i].p,predec[i],p[i].visite);
		}
	
	i=arri;
		printf("ARRIVEE au sommet %d \n",dep);
	while(i>dep){
			printf("la ROUUUUUTEEEEE = %s \n",s.A[predec[i]][i].nom);
			i=predec[i];
		}
		printf("DEPART au sommet %d \n",dep);
		printf("le chemin le plus rapide pour allez de %d a %d ce fais en %d minutes\n (je suis un rouleau) \n",dep, arri, p[arri].p);
}

void init_menu(){
		printf("\t\t\tOu vous trouvez-vous ?\n");
		printf("1-Pic Blanc | 2-3060 | 3-3000 | 4-2800");
	
}


int main(int argc, char** argv)
{
	STATION s;	
	int niveau=0;
	while(niveau != 1 && niveau != 2){
		printf("\t\t\tQuel type de skieur êtes-vous ?\n1-Expert\n2-Moyen \n");
		scanf("%d",&niveau);
	}
	init_menu();
	
	Dijkstra("le mont","le bas",niveau);
	 
return 0;
}

